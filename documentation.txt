# Secure Messaging System Documentation
Version 1.0

## Table of Contents
1. Overview
2. System Architecture
3. Features
4. Security Implementation
5. Setup Instructions
6. API Documentation
7. Troubleshooting
8. Best Practices

## 1. Overview
The Secure Messaging System consists of two interconnected Django applications (app1 and app2) that enable secure, encrypted message exchange between users. The system implements real-time communication using WebSockets and ensures message security through Fernet symmetric encryption.

## 2. System Architecture

### 2.1 Components
- Django Web Framework (5.1.4+)
- Channels for WebSocket support
- REST Framework for API endpoints
- JWT Authentication
- Fernet Encryption
- SQLite Database (configurable)

### 2.2 Application Structure 
```

## 3. Features

### 3.1 User Management
- User registration
- Secure login/logout
- JWT-based authentication
- Session management

### 3.2 Messaging Capabilities
- Real-time message exchange
- End-to-end encryption
- Message persistence
- Cross-application communication
- Message deletion
- Message history

### 3.3 Security Features
- Encrypted message storage
- Secure communication channels
- CSRF protection
- Cross-Origin Resource Sharing (CORS)
- Environment-based configuration

## 4. Security Implementation

### 4.1 Encryption
- Fernet symmetric encryption
- Secure key management
- Encrypted message storage
- Middleware encryption layer

### 4.2 Authentication
- JWT token-based authentication
- Secure password handling
- Protected API endpoints

## 5. Setup Instructions

### 5.1 Prerequisites
- Python 3.8+
- pip package manager
- Virtual environment (recommended)

### 5.2 Installation Steps

1. Clone the repository:
```bash
git clone [repository-url]
```

2. Create and activate virtual environment:
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. Install dependencies:
```bash
pip install -r requirements.txt
```

4. Configure environment variables:
Create .env files in both app1 and app2 directories with:
```
FERNET_KEY=your_fernet_key
SECRET_KEY=your_django_secret_key
DEBUG=True
```

5. Database setup:
```bash
# For app1
cd app1
python manage.py migrate

# For app2
cd ../app2
python manage.py migrate
```

6. Create superuser for both applications:
```bash
python manage.py createsuperuser
```

7. Run the applications:
```bash
# Terminal 1 (app1)
python manage.py runserver 8000

# Terminal 2 (app2)
python manage.py runserver 8002
```

## 6. API Documentation

### 6.1 Authentication Endpoints
- POST /login/ - User login
- POST /register/ - User registration
- POST /logout/ - User logout

### 6.2 Message Endpoints
- GET /api/messages/ - List messages
- POST /api/send-message/ - Send message
- DELETE /api/messages/<id>/ - Delete message

### 6.3 WebSocket Endpoints
- ws://localhost:8000/ws/app1/ - App1 WebSocket
- ws://localhost:8002/ws/app2/ - App2 WebSocket

## 7. Troubleshooting

### 7.1 Common Issues
1. Encryption Key Issues
   - Ensure FERNET_KEY is properly set in .env
   - Verify key format and length

2. WebSocket Connection Issues
   - Check CORS settings
   - Verify WebSocket endpoint URLs

3. Database Issues
   - Run migrations
   - Check database permissions

### 7.2 Error Messages
- "Fernet key is missing" - Check .env file
- "Invalid token" - JWT authentication issue
- "Connection refused" - WebSocket connection issue

## 8. Best Practices

### 8.1 Security
- Regularly rotate encryption keys
- Keep Django and dependencies updated
- Monitor application logs
- Regular security audits

### 8.2 Development
- Use version control
- Follow PEP 8 style guide
- Write unit tests
- Document code changes

### 8.3 Deployment
- Use HTTPS in production
- Configure proper CORS settings
- Set DEBUG=False in production
- Use environment variables

## Contact & Support
For support or questions, contact:
[Your Contact Information]

## License
[Your License Information]

## Version History
- 1.0 - Initial release
- [Future versions]

---
Last Updated: [Current Date]
```

This documentation provides a comprehensive overview of the system, its features, setup instructions, and best practices. You can customize it further based on your specific needs or add more sections as required.

Would you like me to elaborate on any specific section or add more details to certain parts?